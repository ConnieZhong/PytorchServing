// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Core.proto

#ifndef PROTOBUF_INCLUDED_Core_2eproto
#define PROTOBUF_INCLUDED_Core_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Core_2eproto 

namespace protobuf_Core_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Core_2eproto
namespace pytorchserving {
class ModelSpec;
class ModelSpecDefaultTypeInternal;
extern ModelSpecDefaultTypeInternal _ModelSpec_default_instance_;
}  // namespace pytorchserving
namespace google {
namespace protobuf {
template<> ::pytorchserving::ModelSpec* Arena::CreateMaybeMessage<::pytorchserving::ModelSpec>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pytorchserving {

enum Mode {
  M_INVALID = 0,
  M_LATEST = 1,
  M_SPECIFIC = 2
};
bool Mode_IsValid(int value);
const Mode Mode_MIN = M_INVALID;
const Mode Mode_MAX = M_SPECIFIC;
const int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mode_descriptor();
inline const ::std::string& Mode_Name(Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mode_descriptor(), value);
}
inline bool Mode_Parse(
    const ::std::string& name, Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
// ===================================================================

class ModelSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pytorchserving.ModelSpec) */ {
 public:
  ModelSpec();
  virtual ~ModelSpec();

  ModelSpec(const ModelSpec& from);

  inline ModelSpec& operator=(const ModelSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelSpec(ModelSpec&& from) noexcept
    : ModelSpec() {
    *this = ::std::move(from);
  }

  inline ModelSpec& operator=(ModelSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelSpec* internal_default_instance() {
    return reinterpret_cast<const ModelSpec*>(
               &_ModelSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ModelSpec* other);
  friend void swap(ModelSpec& a, ModelSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelSpec* New() const final {
    return CreateMaybeMessage<ModelSpec>(NULL);
  }

  ModelSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModelSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModelSpec& from);
  void MergeFrom(const ModelSpec& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string model_name = 1;
  bool has_model_name() const;
  void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  #if LANG_CXX11
  void set_model_name(::std::string&& value);
  #endif
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // optional int32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // required int32 mode = 3;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::google::protobuf::int32 mode() const;
  void set_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pytorchserving.ModelSpec)
 private:
  void set_has_model_name();
  void clear_has_model_name();
  void set_has_version();
  void clear_has_version();
  void set_has_mode();
  void clear_has_mode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 mode_;
  friend struct ::protobuf_Core_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelSpec

// required string model_name = 1;
inline bool ModelSpec::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelSpec::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelSpec::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelSpec::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
inline const ::std::string& ModelSpec::model_name() const {
  // @@protoc_insertion_point(field_get:pytorchserving.ModelSpec.model_name)
  return model_name_.GetNoArena();
}
inline void ModelSpec::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pytorchserving.ModelSpec.model_name)
}
#if LANG_CXX11
inline void ModelSpec::set_model_name(::std::string&& value) {
  set_has_model_name();
  model_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pytorchserving.ModelSpec.model_name)
}
#endif
inline void ModelSpec::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pytorchserving.ModelSpec.model_name)
}
inline void ModelSpec::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pytorchserving.ModelSpec.model_name)
}
inline ::std::string* ModelSpec::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:pytorchserving.ModelSpec.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelSpec::release_model_name() {
  // @@protoc_insertion_point(field_release:pytorchserving.ModelSpec.model_name)
  if (!has_model_name()) {
    return NULL;
  }
  clear_has_model_name();
  return model_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelSpec::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:pytorchserving.ModelSpec.model_name)
}

// optional int32 version = 2;
inline bool ModelSpec::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelSpec::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelSpec::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelSpec::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 ModelSpec::version() const {
  // @@protoc_insertion_point(field_get:pytorchserving.ModelSpec.version)
  return version_;
}
inline void ModelSpec::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pytorchserving.ModelSpec.version)
}

// required int32 mode = 3;
inline bool ModelSpec::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelSpec::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelSpec::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelSpec::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 ModelSpec::mode() const {
  // @@protoc_insertion_point(field_get:pytorchserving.ModelSpec.mode)
  return mode_;
}
inline void ModelSpec::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:pytorchserving.ModelSpec.mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pytorchserving

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pytorchserving::Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pytorchserving::Mode>() {
  return ::pytorchserving::Mode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Core_2eproto
