// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tensor.proto

#include "Tensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Tensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Tensor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TensorShape;
}  // namespace protobuf_Tensor_2eproto
namespace pytorchserving {
class TensorShapeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TensorShape>
      _instance;
} _TensorShape_default_instance_;
class TensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tensor>
      _instance;
} _Tensor_default_instance_;
}  // namespace pytorchserving
namespace protobuf_Tensor_2eproto {
static void InitDefaultsTensorShape() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pytorchserving::_TensorShape_default_instance_;
    new (ptr) ::pytorchserving::TensorShape();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pytorchserving::TensorShape::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TensorShape =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTensorShape}, {}};

static void InitDefaultsTensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pytorchserving::_Tensor_default_instance_;
    new (ptr) ::pytorchserving::Tensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pytorchserving::Tensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Tensor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTensor}, {
      &protobuf_Tensor_2eproto::scc_info_TensorShape.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TensorShape.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tensor.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pytorchserving::TensorShape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pytorchserving::TensorShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pytorchserving::TensorShape, dim_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pytorchserving::Tensor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pytorchserving::Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pytorchserving::Tensor, dtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pytorchserving::Tensor, tensor_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pytorchserving::Tensor, data_),
  2,
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::pytorchserving::TensorShape)},
  { 7, 15, sizeof(::pytorchserving::Tensor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pytorchserving::_TensorShape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pytorchserving::_Tensor_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Tensor.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Tensor.proto\022\016pytorchserving\"\032\n\013Tensor"
      "Shape\022\013\n\003dim\030\001 \003(\005\"r\n\006Tensor\022\'\n\005dtype\030\001 "
      "\002(\0162\030.pytorchserving.DataType\0221\n\014tensor_"
      "shape\030\002 \002(\0132\033.pytorchserving.TensorShape"
      "\022\014\n\004data\030\003 \002(\014*S\n\tErrorCode\022\016\n\nEC_SUCCES"
      "S\020\000\022\021\n\rEC_TYPE_ERROR\020\001\022\021\n\rEC_PARM_ERROR\020"
      "\002\022\020\n\014EC_MEM_ERROR\020\003*`\n\010DataType\022\016\n\nDT_IN"
      "VALID\020\000\022\014\n\010DT_FLOAT\020\001\022\r\n\tDT_DOUBLE\020\002\022\014\n\010"
      "DT_INT32\020\003\022\014\n\010DT_INT64\020\004\022\013\n\007DT_BOOL\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Tensor.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Tensor_2eproto
namespace pytorchserving {
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_Tensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Tensor_2eproto::file_level_enum_descriptors[0];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_Tensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Tensor_2eproto::file_level_enum_descriptors[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TensorShape::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorShape::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorShape::TensorShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Tensor_2eproto::scc_info_TensorShape.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pytorchserving.TensorShape)
}
TensorShape::TensorShape(const TensorShape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pytorchserving.TensorShape)
}

void TensorShape::SharedCtor() {
}

TensorShape::~TensorShape() {
  // @@protoc_insertion_point(destructor:pytorchserving.TensorShape)
  SharedDtor();
}

void TensorShape::SharedDtor() {
}

void TensorShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TensorShape::descriptor() {
  ::protobuf_Tensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Tensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorShape& TensorShape::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Tensor_2eproto::scc_info_TensorShape.base);
  return *internal_default_instance();
}


void TensorShape::Clear() {
// @@protoc_insertion_point(message_clear_start:pytorchserving.TensorShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TensorShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pytorchserving.TensorShape)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dim = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_dim())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pytorchserving.TensorShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pytorchserving.TensorShape)
  return false;
#undef DO_
}

void TensorShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pytorchserving.TensorShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 dim = 1;
  for (int i = 0, n = this->dim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->dim(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pytorchserving.TensorShape)
}

::google::protobuf::uint8* TensorShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pytorchserving.TensorShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 dim = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->dim_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pytorchserving.TensorShape)
  return target;
}

size_t TensorShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pytorchserving.TensorShape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 dim = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dim_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dim_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pytorchserving.TensorShape)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pytorchserving.TensorShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pytorchserving.TensorShape)
    MergeFrom(*source);
  }
}

void TensorShape::MergeFrom(const TensorShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pytorchserving.TensorShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void TensorShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pytorchserving.TensorShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorShape::CopyFrom(const TensorShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pytorchserving.TensorShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorShape::IsInitialized() const {
  return true;
}

void TensorShape::Swap(TensorShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorShape::InternalSwap(TensorShape* other) {
  using std::swap;
  dim_.InternalSwap(&other->dim_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TensorShape::GetMetadata() const {
  protobuf_Tensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Tensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tensor::InitAsDefaultInstance() {
  ::pytorchserving::_Tensor_default_instance_._instance.get_mutable()->tensor_shape_ = const_cast< ::pytorchserving::TensorShape*>(
      ::pytorchserving::TensorShape::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tensor::kDtypeFieldNumber;
const int Tensor::kTensorShapeFieldNumber;
const int Tensor::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tensor::Tensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Tensor_2eproto::scc_info_Tensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pytorchserving.Tensor)
}
Tensor::Tensor(const Tensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_tensor_shape()) {
    tensor_shape_ = new ::pytorchserving::TensorShape(*from.tensor_shape_);
  } else {
    tensor_shape_ = NULL;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:pytorchserving.Tensor)
}

void Tensor::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&tensor_shape_)) + sizeof(dtype_));
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:pytorchserving.Tensor)
  SharedDtor();
}

void Tensor::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_shape_;
}

void Tensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Tensor::descriptor() {
  ::protobuf_Tensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Tensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tensor& Tensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Tensor_2eproto::scc_info_Tensor.base);
  return *internal_default_instance();
}


void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:pytorchserving.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tensor_shape_ != NULL);
      tensor_shape_->Clear();
    }
  }
  dtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pytorchserving.Tensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pytorchserving.DataType dtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pytorchserving::DataType_IsValid(value)) {
            set_dtype(static_cast< ::pytorchserving::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pytorchserving.TensorShape tensor_shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pytorchserving.Tensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pytorchserving.Tensor)
  return false;
#undef DO_
}

void Tensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pytorchserving.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pytorchserving.DataType dtype = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // required .pytorchserving.TensorShape tensor_shape = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_tensor_shape(), output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pytorchserving.Tensor)
}

::google::protobuf::uint8* Tensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pytorchserving.Tensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pytorchserving.DataType dtype = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // required .pytorchserving.TensorShape tensor_shape = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_tensor_shape(), deterministic, target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pytorchserving.Tensor)
  return target;
}

size_t Tensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pytorchserving.Tensor)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_tensor_shape()) {
    // required .pytorchserving.TensorShape tensor_shape = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tensor_shape_);
  }

  if (has_dtype()) {
    // required .pytorchserving.DataType dtype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  return total_size;
}
size_t Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pytorchserving.Tensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required .pytorchserving.TensorShape tensor_shape = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tensor_shape_);

    // required .pytorchserving.DataType dtype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pytorchserving.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Tensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pytorchserving.Tensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pytorchserving.Tensor)
    MergeFrom(*source);
  }
}

void Tensor::MergeFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pytorchserving.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tensor_shape()->::pytorchserving::TensorShape::MergeFrom(from.tensor_shape());
    }
    if (cached_has_bits & 0x00000004u) {
      dtype_ = from.dtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Tensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pytorchserving.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pytorchserving.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Tensor::Swap(Tensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tensor::InternalSwap(Tensor* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tensor_shape_, other->tensor_shape_);
  swap(dtype_, other->dtype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Tensor::GetMetadata() const {
  protobuf_Tensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Tensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pytorchserving
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pytorchserving::TensorShape* Arena::CreateMaybeMessage< ::pytorchserving::TensorShape >(Arena* arena) {
  return Arena::CreateInternal< ::pytorchserving::TensorShape >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pytorchserving::Tensor* Arena::CreateMaybeMessage< ::pytorchserving::Tensor >(Arena* arena) {
  return Arena::CreateInternal< ::pytorchserving::Tensor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
